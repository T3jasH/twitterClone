[{"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\index.js":"1","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\reportWebVitals.js":"2","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\App.js":"3","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\store.js":"4","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Reducers\\index.js":"5","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Reducers\\errorReducer.js":"6","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Reducers\\authReducer.js":"7","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\Register.js":"8","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Actions\\authActions.js":"9","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Actions\\types.js":"10","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Actions\\errorActions.js":"11","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\LandingPage.js":"12","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\utils.js":"13","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\Profile.js":"14","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Reducers\\profileReducer.js":"15","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Actions\\profileActions.js":"16","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\MainPage.js":"17","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\MainComponents\\Home.js":"18","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Actions\\tweetActions.js":"19","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\MainComponents\\Search.js":"20","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\MainComponents\\ProfileHandler.js":"21","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\TweetComponents\\TweetsList.js":"22","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\TweetComponents\\TweetHandler.js":"23","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\TweetComponents\\MakeTweet.js":"24","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\TweetComponents\\Reply.js":"25","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\MainComponents\\Notifications.js":"26","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\TweetComponents\\TrendHandler.js":"27"},{"size":500,"mtime":499162500000,"results":"28","hashOfConfig":"29"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"29"},{"size":1349,"mtime":1612608391705,"results":"31","hashOfConfig":"29"},{"size":385,"mtime":1606992166708,"results":"32","hashOfConfig":"29"},{"size":295,"mtime":1610287273640,"results":"33","hashOfConfig":"29"},{"size":607,"mtime":1607074408554,"results":"34","hashOfConfig":"29"},{"size":1765,"mtime":1612246360976,"results":"35","hashOfConfig":"29"},{"size":5464,"mtime":1611467750838,"results":"36","hashOfConfig":"29"},{"size":2068,"mtime":1611468196906,"results":"37","hashOfConfig":"29"},{"size":704,"mtime":1612160782863,"results":"38","hashOfConfig":"29"},{"size":314,"mtime":1607073836257,"results":"39","hashOfConfig":"29"},{"size":7055,"mtime":1609268818747,"results":"40","hashOfConfig":"29"},{"size":199,"mtime":1607254433398,"results":"41","hashOfConfig":"29"},{"size":14701,"mtime":1611471740590,"results":"42","hashOfConfig":"29"},{"size":1174,"mtime":1612160638144,"results":"43","hashOfConfig":"29"},{"size":2026,"mtime":1608491625083,"results":"44","hashOfConfig":"29"},{"size":12395,"mtime":1612616128436,"results":"45","hashOfConfig":"29"},{"size":1935,"mtime":1612616784967,"results":"46","hashOfConfig":"29"},{"size":3089,"mtime":1612609341514,"results":"47","hashOfConfig":"29"},{"size":7896,"mtime":1612601635056,"results":"48","hashOfConfig":"29"},{"size":10522,"mtime":1612601286320,"results":"49","hashOfConfig":"29"},{"size":15805,"mtime":1612616504983,"results":"50","hashOfConfig":"29"},{"size":11623,"mtime":1612609204065,"results":"51","hashOfConfig":"29"},{"size":9033,"mtime":1612604992168,"results":"52","hashOfConfig":"29"},{"size":3445,"mtime":1612610418897,"results":"53","hashOfConfig":"29"},{"size":4949,"mtime":1612594838719,"results":"54","hashOfConfig":"29"},{"size":825,"mtime":1612608603137,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1ok4f9d",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"58"},"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\index.js",[],["120","121"],"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\reportWebVitals.js",[],"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\App.js",[],"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\store.js",[],"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Reducers\\index.js",[],"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Reducers\\errorReducer.js",[],"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Reducers\\authReducer.js",[],"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\Register.js",["122"],"import {useState, useEffect} from 'react';\r\nimport styled from 'styled-components'; \r\nimport {register} from '../Actions/authActions'; \r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    usePrevious\r\n}\r\nfrom '../utils' \r\n\r\n\r\n// import {BrowserRouter as Router, \r\n//     Switch,\r\n//     Link\r\n// } from 'react-router-dom'\r\nconst Body = styled.div`\r\n    height : 100vh;\r\n    width : 100vw;\r\n    background-color : #242323;\r\n`\r\n\r\nconst Input = styled.input`\r\n    width : 80%;\r\n    height : 45px;\r\n    color : white;\r\n    background-color : #363636;\r\n    border-bottom-color :  #363636 ;\r\n    border-bottom-width : 3px;\r\n    border-left : none;\r\n    border-right : none;\r\n    border-top : none;\r\n    font-family: 'Poppin';\r\n    font-size : 18px;\r\n    : hover{\r\n        border-bottom-color : #02E4FA;\r\n        :: placeholder{\r\n        color : #1FB9EC;\r\n        }\r\n    }\r\n    outline : none;\r\n    : focus{\r\n        border-bottom-color : #02E4FA;\r\n    }\r\n    @media (max-width : 850px){\r\n        height : 37px;\r\n        font-size : 15px;\r\n    }\r\n    @media (max-width : 600px){\r\n        height : 30px;\r\n    }\r\n`\r\nconst Button = styled.button`\r\n    position : relative;\r\n    outline : none;\r\n    border : none;\r\n    margin : 3vh 0;\r\n    box-shadow : 0px 1px 1px 1px #1FB9EC;\r\n    color : white;\r\n    height : 30px;\r\n    width : 70px;\r\n    border-radius : 15px;\r\n    background-color : #1FB9EC;\r\n    cursor : pointer;\r\n    font-weight : bold;\r\n    :active{\r\n        box-shadow : 0px 2px 2px 2px #111;\r\n        transition : 0.2s all;\r\n    }\r\n    @media (max-width : 600px){\r\n        height : 25px;\r\n        width : 55px;\r\n        font-size : 14px;\r\n    }\r\n`\r\nconst FormGroup = styled.div`\r\n    display : flex;\r\n    flex-direction : column;\r\n    margin : 5vh 0px 4vh 3vw;\r\n    @media (max-width : 600px){\r\n        margin : 5vh 0px 6vh 3vw;\r\n    }\r\n`\r\nconst Span = styled.span`\r\n    font-size : 18px;\r\n    color : #FE5A4A;\r\n    position : relative;\r\n`\r\n\r\nconst Register = (props) =>{\r\n    const [username, setUsername] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [email, setEmail] = useState(''); \r\n    const [error, setError] = useState(null);\r\n    const onChange = (e) =>{\r\n        switch(e.target.name){\r\n            case \"name\" :\r\n                setName(e.target.value);\r\n                break;\r\n            case \"username\" : \r\n                setUsername(e.target.value);\r\n                break;\r\n            case \"email\" :\r\n                setEmail(e.target.value);\r\n                break;\r\n            case \"password\" :\r\n                setPassword(e.target.value);\r\n                break;\r\n            default :\r\n                return null;\r\n        }    \r\n    }\r\n    const prevMsg = usePrevious(props.err.msg);\r\n    useEffect(\r\n        () => {\r\n            if(prevMsg !== props.err.msg){\r\n                setError(props.err.msg);\r\n            }\r\n            if(props.isAuthenticated){\r\n                window.location.href=\"/set_up_profile\";\r\n            }\r\n        }, [props.err.msg, props.isAuthenticated]\r\n    )\r\n\r\n    const onClick = () =>{\r\n       const user = {\r\n        username : username.trim(),\r\n        name : name.trim(),\r\n        password : password,\r\n        email : email.trim()\r\n    }\r\n    props.register(user);\r\n    }\r\n\r\n    return(\r\n        <Body>\r\n    <div className=\"form\">\r\n        <h2\r\n        style={{fontFamily : \"apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif\",\r\n                left : \"3vw\", top : \"2vh\", position : \"relative\", alignContent :\"justify\"\r\n    }}\r\n        >\r\n            Create your account\r\n        </h2>\r\n        <FormGroup>\r\n            <Input name=\"name\" type=\"text\" placeholder=\"Name\" onChange={onChange}\r\n            style = {error === \"Name cannot contain special characters\" ? {borderBottomColor : \"red\"} : {borderBlockColor : \"#363636\" }}\r\n            />\r\n        </FormGroup>\r\n        <FormGroup>\r\n            <Input name=\"email\" type=\"text\" placeholder=\"Email\" onChange={onChange}\r\n            style = {error === \"Please enter valid email id\" ? {borderBottomColor : \"red\"} : {borderBlockColor : \"#363636\" }}\r\n            />\r\n        </FormGroup>\r\n        <FormGroup>\r\n            <Input name=\"username\" type=\"text\" placeholder=\"Username\" onChange={onChange}\r\n            style = {error === \"Username cannot contain special characters or space\" ? {borderBottomColor : \"red\"} : {borderBlockColor : \"#363636\" }}\r\n            />\r\n        </FormGroup>\r\n        <FormGroup>\r\n            <Input name=\"password\" type=\"password\" placeholder=\"Password\" onChange={onChange}\r\n            style = {error === \"Password must contain 6 to 20 characters, and contain at least one special character, digit and letter\" ? {borderBottomColor : \"red\"} : {borderBlockColor : \"#363636\" }}\r\n            />\r\n        </FormGroup>\r\n        {\r\n            error ?<center> <Span>{error}</Span> </center>: null\r\n        }\r\n        <center>\r\n        <Button onClick={onClick}>Submit</Button>\r\n    \r\n        </center>\r\n    </div>\r\n    </Body>\r\n    )\r\n}\r\n\r\nRegister.propTypes = {\r\n    isAuthenticated : PropTypes.bool.isRequired,\r\n    register : PropTypes.func.isRequired,\r\n    err : PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuthenticated : state.auth.isAuthenticated,\r\n    err : state.error\r\n})\r\n\r\nexport default connect(mapStateToProps, {register})(Register);","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Actions\\authActions.js",[],"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Actions\\types.js",[],"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Actions\\errorActions.js",[],"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\LandingPage.js",["123"],"import {connect} from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {login} from '../Actions/authActions';\r\nimport {\r\n    usePrevious\r\n}\r\nfrom '../utils'\r\n\r\nconst Container = styled.div`\r\n    display : flex;\r\n    @media (max-width : 550px){\r\n        flex-direction : column-reverse;\r\n    }\r\n`\r\nconst P = styled.p`\r\n`\r\nconst RightHalf = styled.div`\r\n    height : 100vh;\r\n    width : 50vw;\r\n    @media (max-width : 550px){\r\n        width : 100%;\r\n        height : 65vh; \r\n    }\r\n`\r\n\r\nconst LeftHalf = styled.div`\r\n    background : #54b2de;\r\n    height : 100vh;\r\n    width : 50vw;\r\n    margin : 0;\r\n    @media (max-width : 550px){\r\n        width : 100%;\r\n        height : 35vh;\r\n    }\r\n`\r\nconst Button = styled.button`\r\n`\r\nconst FormGroup = styled.div`\r\n    display : flex;\r\n    flex-direction : row;\r\n    margin-top : 15px;\r\n    margin-right : 0px;\r\n    ${Button}{\r\n    margin : 10px 8px;\r\n    outline : none;\r\n    border: 1px solid #1FB9EC;\r\n    margin : 15px 0px;\r\n    background : #111;\r\n    color : #1FB9EC;\r\n    height : 40px;\r\n    width : 75px;\r\n    border-radius : 35px;\r\n    font-size : 15px;\r\n    cursor : pointer;\r\n    : active {\r\n        background : rgba(193, 237, 232, 0.1);\r\n    }\r\n    @media (max-width : 550px){\r\n        height : 30px;\r\n    }\r\n    }\r\n    \r\n`\r\n\r\nconst Input = styled.input`\r\n    width : 35%;\r\n    height : 45px;\r\n    margin : 10px 20px;\r\n    color : rgba(255, 255, 255, 0.85);\r\n    background-color : #363636;\r\n    border-bottom-color :  #363636 ;\r\n    border-bottom-width : 3px;\r\n    border-left : none;\r\n    border-right : none;\r\n    border-top : none;\r\n    font-family: 'Poppin';\r\n    font-size : 18px;\r\n    : hover{\r\n        border-bottom-color : #02E4FA;\r\n        :: placeholder{\r\n        color : #1FB9EC;\r\n        }\r\n    }\r\n    outline : none;\r\n    : focus{\r\n        border-bottom-color : #02E4FA;\r\n    }\r\n    @media (max-width : 550px){\r\n        height : 37px;\r\n        width : 40%;\r\n        margin : 10px 10px;\r\n    }\r\n`\r\nconst Span = styled.span`\r\n`\r\nconst ErrorContainer = styled.div`\r\n    height : 30px;\r\n    left : 4vw;\r\n    width : 30vw;\r\n    position : relative;\r\n    align-text : justify;\r\n    ${P}{\r\n        font-size : 18px;\r\n        color : red;\r\n    }\r\n`\r\nconst RegisterPrompt = styled.div`\r\n    height : 48vh;\r\n    width : 55vh;\r\n    margin-left : 8vw;\r\n    margin-top : 10vh;\r\n    font-family : -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\r\n    ${P} {\r\n        \r\n    font-weight : 600;\r\n    font-size : 30px;\r\n    color : rgba(255, 255, 255, 0.9);\r\n    text-align : justify;\r\n    word-spacing : 0.03em;\r\n    letter-spacing : 0.01em;\r\n    margin-top : 2vh;\r\n    @media (max-width : 550px) {\r\n        font-size : 24px;\r\n    }\r\n    }   \r\n    ${Span}{\r\n        font-size : 18px;\r\n        font-weight : 500;\r\n        word-spacing : 0.01em;\r\n        letter-spacing : 0.005em;\r\n        position : relative;\r\n        top : 5vh;\r\n        @media (max-width : 550px){\r\n            font-size : 12px;\r\n            top : 2vh;\r\n        }\r\n    }\r\n    ${Button}{\r\n        outline : none;\r\n        border:none;\r\n        border-radius : 30px;\r\n        height : 40px;\r\n        width : 100px;\r\n        color : white;\r\n        background : #018DBD;\r\n        font-size : 18px;\r\n        font-weight:750;\r\n        margin-top : 8vh;\r\n        cursor : pointer;\r\n        : hover {\r\n            background : #2F86A3; \r\n        }\r\n        @media (max-width : 550px){\r\n            margin-top : 5vh;\r\n            height : 25px;\r\n            width : 65px;\r\n            font-size : 14px;\r\n        }\r\n    }\r\n   \r\n  \r\n`\r\nconst LeftContent =styled.div`\r\n    margin-left : 10%;\r\n    margin-top : 35vh;\r\n    font-family : -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\r\n    font-size : 20px;\r\n    font-weight : bold;\r\n    word-spacing : 0.07em;\r\n    letter-spacing : 0.04em;\r\n    @media (max-width : 550px){\r\n        margin-left : 5%;\r\n        margin-top : 5vh;\r\n        font-size : 15px;\r\n    }\r\n ` \r\nconst LandingPage = (props) =>{\r\n    const toRegister = () =>{\r\n        window.location.href = \"/signup\";\r\n    }\r\n    \r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState(null);\r\n    \r\n    const prevMsg = usePrevious(props.err.msg);\r\n    useEffect(\r\n        () => {\r\n            if(prevMsg !== props.err.msg){\r\n                setError(props.err.msg);\r\n            }\r\n            if(props.isAuthenticated) window.location.reload();\r\n        }, [props.err.msg, props.isAuthenticated]\r\n    )\r\n    const onChange = (e) =>{\r\n        switch(e.target.name){\r\n            case \"email\" :\r\n                setEmail(e.target.value);\r\n                break;\r\n            case \"password\" :\r\n                setPassword(e.target.value);\r\n                break;\r\n            default :\r\n                return;\r\n        }    \r\n    }\r\n    const onClick = () =>{\r\n        const user = {\r\n            password : password,\r\n            email : email.trim()\r\n        }\r\n        props.login(user);\r\n    }\r\n    return(\r\n        <Container>\r\n        <LeftHalf>\r\n            <LeftContent>\r\n           <P> \r\n           Follow your interests. <br/><br/>\r\n           Hear what people are talking about. <br/><br/>\r\n           Join the conversation.\r\n           </P>\r\n           </LeftContent>\r\n        </LeftHalf>\r\n        <RightHalf>\r\n            <FormGroup>\r\n                <Input type=\"text\" name=\"email\" placeholder=\"Email\" onChange={onChange}\r\n                style = {error === \"Invalid email ID\" ? {borderBottomColor : \"red\"} : {borderBlockColor : \"#363636\" }}\r\n                /> \r\n                <Input type=\"password\" name=\"password\" placeholder=\"Password\" onChange={onChange}\r\n                style = {error === \"Invalid password\" ? {borderBottomColor : \"red\"} : {borderBlockColor : \"#363636\" }}\r\n                />   \r\n                <Button onClick={onClick}><h4>Log in</h4></Button>\r\n            </FormGroup>   \r\n            <ErrorContainer>\r\n            {\r\n            error ? <center><P>{error}</P></center> : null\r\n            }\r\n            </ErrorContainer>\r\n            <RegisterPrompt>\r\n                <img src=\"twitterIconWhite.png\" alt=\"\"/>\r\n                <center>\r\n                       <P> See what's happening in<br/>the world right now. </P>\r\n                </center>\r\n                <Span>Join Twitter today.</Span>\r\n                <br/>\r\n                <Button onClick={toRegister}>\r\n                    Sign up\r\n                </Button>\r\n            </RegisterPrompt>\r\n        </RightHalf>\r\n        </Container>\r\n    )\r\n}\r\n\r\nLandingPage.propTypes = {\r\n    isAuthenticated : PropTypes.bool.isRequired,\r\n    login : PropTypes.func.isRequired,\r\n    err : PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuthenticated : state.auth.isAuthenticated,\r\n    err : state.error\r\n})\r\nexport default connect(mapStateToProps, {login})(LandingPage);","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\utils.js",[],"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\Profile.js",["124","125","126"],"import { useEffect, useRef, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { usePrevious } from '../utils';\r\nimport {uploadDisp, uploadCover, uploadBio} from '../Actions/profileActions';\r\nimport {logOut} from '../Actions/authActions'\r\nimport {clearErrors} from '../Actions/errorActions';\r\nimport axios from 'axios';\r\nimport { getConfig } from './MainComponents/ProfileHandler';\r\nimport store from '../store';\r\n\r\nconst Body = styled.div`\r\nheight : 100vh;\r\nwidth : 100vw;\r\nbackground-color : #242323;\r\nfont-family : \"-apple-system, BlinkMacSystemFont, Roboto, Helvetica, Arial, sans-serif\"\r\n`\r\nconst MiniNav = styled.div`\r\n    display : inline;\r\n`\r\nconst PrevButton = styled.button`\r\n    outline : none;\r\n    background : black;\r\n    border : none;\r\n    cursor : pointer;\r\n    position : relative;\r\n    left : 6%;\r\n    top : 1%;\r\n    \r\n`\r\n\r\nconst Logo = styled.img`\r\n    top : 2px; \r\n    position : absolute;\r\n    right : 20.2vw;\r\n    @media (max-width : 900px){\r\n        height : 30px;\r\n        width : 30px;\r\n        right : 25vw;\r\n    } \r\n    @media (max-width : 550px){\r\n        right : 40vw;\r\n    }         \r\n`\r\nconst Next = styled.button`\r\n    \r\n    position : absolute;\r\n    outline : none;\r\n    border : none;\r\n    right : 4vw;\r\n    top : 1.5vh;\r\n    box-shadow : 0px 1px 1px 1px #1FB9EC;\r\n    color : white;\r\n    height : 30px;\r\n    width : 70px;\r\n    border-radius : 15px;\r\n    background-color : #1FB9EC;\r\n    cursor : pointer;\r\n    :active{\r\n        box-shadow : 0px 2px 2px 2px #111;\r\n        transition : 0.2s all;\r\n    }\r\n    @media (max-width : 900px){\r\n        height : 25px;\r\n        width : 50px;\r\n    }\r\n    @media (max-width : 550px){\r\n        right : 6vw;\r\n    }\r\n`\r\nconst DispImage = styled.img`\r\n    width : 160px;\r\n    height : 160px;\r\n    border-radius : 160px;\r\n    @media (max-width : 900px){\r\n        width : 120px;\r\n        height : 120px;\r\n        border-radius: 120px;\r\n    }\r\n`\r\nconst CovImage = styled.img`\r\nwidth : 330px; \r\nheight : 145px;\r\n@media (max-width : 900px){\r\n    width : 250px;\r\n    height : 110px;\r\n}\r\n@media (max-width : 350px){\r\n    width : 125px;\r\n    height : 55px;\r\n} \r\n`\r\nconst Upload = styled.button`\r\nposition : relative;\r\noutline : none;\r\nborder : none;\r\nbox-shadow : 0px 1px 1px 1px #1FB9EC;\r\ncolor : white;\r\nheight : 30px;\r\nwidth : 70px;\r\nborder-radius : 15px;\r\nbackground-color : #1FB9EC;\r\ncursor : pointer;\r\nfont-weight : bold;\r\n:active{\r\n    box-shadow : 0px 2px 2px 2px #111;\r\n    transition : 0.2s all;\r\n}\r\n@media (max-width : 900px){\r\n    height : 25px;\r\n    width : 50px;\r\n}\r\n`\r\nconst DeleteAccount = styled.button`\r\nposition : relative;\r\nmargin-top : 50px;\r\noutline : none;\r\nborder : none;\r\nbox-shadow : 1px 1px 1px 1px red;\r\ncolor : white;\r\nheight : 30px;\r\nwidth : 120px;\r\nborder-radius : 15px;\r\nbackground-color : red;\r\ncursor : pointer;\r\nfont-weight : bold;\r\nfont-size : 14px;\r\n:active{\r\n    box-shadow : 0px 2px 2px 2px #111;\r\n    transition : 0.2s all;\r\n}\r\n@media (max-width : 900px){\r\n    height : 25px;\r\n    width : 105px;\r\n}   \r\n`\r\nconst About = styled.textarea`\r\n    resize : none;\r\n    height : 100px;\r\n    width : 30vw;\r\n    background : #2A2D2D;\r\n    outline : none;\r\n    border-width : 0px 0px 3px 0px;\r\n    padding : 10px;\r\n    color : rgba(255, 255, 255, 0.8);\r\n    font-size : 20px;\r\n    : hover{\r\n        border-bottom-color : #02E4FA;\r\n        :: placeholder{\r\n        color : #1FB9EC;\r\n        }\r\n    }\r\n\r\n    :   focus{\r\n        border-bottom-color : #02E4FA;\r\n        :: placeholder{\r\n        color : #1FB9EC;\r\n        }\r\n    }\r\n    @media (max-width : 900px){\r\n        width : 40vw;\r\n    }\r\n    @media (max-width : 550px){\r\n        width : 70vw;\r\n    }\r\n`\r\nconst P = styled.p``;\r\nconst Yes = styled.button`\r\n    outline : none;\r\n    width : 50px;\r\n    position : relative;  \r\n    top : 15px;\r\n    left : 60px;\r\n    border-radius : 15px;\r\n    background : inherit;\r\n    color : red;\r\n    border : 1px solid red;\r\n    cursor : pointer;\r\n    font-family : inherit;\r\n    font-size : inherit;\r\n`\r\nconst No = styled.button`\r\n    outline : none;\r\n    width : 50px;\r\n    position : relative;  \r\n    top : 15px;\r\n    margin-left : 180px;\r\n    border-radius : 15px;\r\n    background : inherit;\r\n    color : #1FB9EC;\r\n    border : 1px solid #1FB9EC;\r\n    font-family : inherit;\r\n    font-size : inherit;\r\n    cursor : pointer;\r\n`\r\nconst DeletePrompt = styled.div`\r\n    display : none;\r\n    border-radius : 30px;\r\n    position : fixed;\r\n    height : 150px;\r\n    width : 25%;\r\n    top : 65px;\r\n    left : 37%;\r\n    z-index : 1;\r\n    background-color : #111;\r\n    font-size : 20px;\r\n    font-family : \"-apple-system, BlinkMacSystemFont, Roboto, Helvetica, Arial, sans-serif\";\r\n    ${P}{\r\n        margin-top : 5px;\r\n        width : 90%;\r\n        margin-left : 5%;\r\n        height : auto;\r\n        color : red;\r\n    }\r\n`\r\nconst ProfileUpload = props =>{\r\n    const [dispPic, setDispPic] = useState('');\r\n    const [coverPic, setCoverPic] = useState('');\r\n    const [bio, setBio] = useState('');\r\n    const [content, setContent] = useState(\"display\");\r\n    const prevDisplay = usePrevious(props.profile.display);\r\n    const prevCover = usePrevious(props.profile.cover);\r\n    const prevBio = usePrevious(props.profile.about);\r\n    useEffect(()=>{\r\n        if(props.profile.cover)\r\n        setCoverPic(props.profile.cover);\r\n        if(props.profile.display)\r\n        setDispPic(props.profile.display);\r\n        if(props.profile.about)\r\n        setBio(props.profile.about); \r\n    }, [])\r\n    useEffect(()=>{\r\n      if(props.profile.display !== prevDisplay){\r\n          setDispPic(props.profile.display);\r\n      }\r\n      if(props.profile.cover !== prevCover){\r\n        setCoverPic(props.profile.cover);\r\n      }\r\n      if(props.profile.about !== prevBio){\r\n        setBio(props.profile.about);\r\n      }\r\n    }, [props.profile])\r\n    const displayDeleteBtn = (date) =>{\r\n       const year = date[0] + date[1] + date[2] + date[3];\r\n       var month = date[5] + date[6];\r\n       month--;\r\n       var day = date[8] + date[9];\r\n       const sentTime = new Date(year, month, day, date[11]+ date[12], date[14]+ date[15], 0, 0).getTime()/ (1000*60);\r\n       const current = Date.now()/(1000*60);\r\n       var dif = current - sentTime;\r\n       console.log(dif)\r\n       return dif > 60 ;\r\n    }\r\n    const onChange = (e) =>{\r\n        setBio(e.target.value);\r\n    }\r\n    const submit = (e) =>{\r\n        props.uploadBio(document.getElementById(\"about\").value);\r\n        window.location.href=`/profile/${props.auth.user.username}`\r\n    }\r\n    const shiftRight = () =>{\r\n        props.clearErrors();\r\n        if(content===\"display\"){\r\n            setContent(\"cover\")\r\n        }\r\n        else if(content===\"cover\"){\r\n            setContent(\"about\")\r\n        }\r\n    }\r\n    const shifLeft = () =>{\r\n        props.clearErrors();\r\n        if(content===\"about\")\r\n        setContent(\"cover\");\r\n        else if (content===\"cover\")\r\n        setContent(\"display\");\r\n    }\r\n    const hiddenFileDisp = useRef(null);\r\n    const clickDisp = (e) => hiddenFileDisp.current.click();\r\n    const onChangeDisp = e => { \r\n        const file = e.target.files[0];\r\n        document.getElementById(\"display\").value=null;\r\n        if(!file) return;\r\n        const formData = new FormData();\r\n        formData.append('display', file);\r\n        props.uploadDisp(formData);\r\n    }\r\n    const hiddenFileCov = useRef(null);\r\n    const clickCov = (e) => hiddenFileCov.current.click();\r\n    const onChangeCov = e => { \r\n        const file = e.target.files[0];\r\n        document.getElementById(\"cover\").value=null;\r\n        if(!file) return;\r\n        const formData = new FormData();\r\n        formData.append('cover', file);\r\n        props.uploadCover(formData);\r\n    }\r\n    const deleteAccount = () =>{\r\n        axios.get('/api/auth/delete', getConfig(props.auth))\r\n        .then(\r\n            () => {\r\n                props.logOut();\r\n                window.location.href=\"/\"\r\n            }\r\n        )\r\n        .catch(err => console.log(err))\r\n    }\r\n    return(\r\n        !store.getState().auth.token ? window.location=\"/home\" :\r\n        <Body>\r\n        <div className=\"profileSetup\">\r\n            <MiniNav>\r\n            {\r\n            content === \"display\" ? null :\r\n            <PrevButton onClick={shifLeft}>\r\n            <img src=\"prevIcon.png\" width=\"45px\" alt=\"\"/>\r\n            </PrevButton>\r\n            }\r\n            <Logo src=\"twitterIconWhite.png\" />\r\n            {\r\n            content === \"about\" ? null :\r\n            <Next className=\"btn-next\" onClick={shiftRight}><b>Next</b></Next>\r\n            }\r\n            </MiniNav>\r\n        \r\n            <br/><br/><br/><br/>\r\n            \r\n           {\r\n           content === \"display\" ?  \r\n        <p\r\n            style={{\r\n                fontSize : \"3vh\",\r\n                position : \"absolute\",\r\n                left : \"2vw\"\r\n            }}\r\n        >Pick a profile picture</p>\r\n        :\r\n        content === \"cover\" ?\r\n        <p\r\n            style={{\r\n                fontFamily : \"-apple-system, BlinkMacSystemFont, Roboto, Helvetica, Arial, sans-serif\",\r\n                fontSize : \"3vh\",\r\n                position : \"absolute\",\r\n                left : \"2vw\"\r\n            }}\r\n        >Pick a header</p>\r\n        \r\n        :\r\n        <p\r\n            style={{\r\n                fontFamily : \"-apple-system, BlinkMacSystemFont, Roboto, Helvetica, Arial, sans-serif\",\r\n                fontSize : \"3vh\",\r\n                position : \"absolute\",\r\n                left : \"2vw\"\r\n            }}\r\n        >Describe yourself</p>\r\n        }\r\n        <br/><br/><br/>\r\n        {content !== \"about\" ?\r\n    \r\n            content === \"display\" ?\r\n            <center>\r\n                {\r\n                dispPic  ?\r\n                <DispImage className =\"dispImage\" src={`/display/${dispPic}`} />\r\n                :\r\n                <DispImage className =\"dispImage\" src=\"avatar.jpg\" height=\"120px\" width=\"120px\"/>\r\n                }\r\n                <br/>\r\n            </center>\r\n            :\r\n            <center>\r\n                {!coverPic ?\r\n                <CovImage src=\"/grey.png\" \r\n              style={{\r\n                  position : \"relative\",\r\n                  bottom : \"1vh\"\r\n              }}\r\n              /> \r\n              :\r\n              <CovImage src={`/cover/${coverPic}`} \r\n              className=\"coverImg\"   \r\n              style={{\r\n                  position : \"relative\",\r\n                  bottom : \"1vh\"\r\n              }}\r\n              />\r\n            }\r\n              <br/>\r\n            </center>\r\n            \r\n            :\r\n            null\r\n        }   \r\n               {\r\n                content !== \"about\" ?\r\n                content === \"display\" ?\r\n                <div>\r\n                <input type=\"file\" style={{visibility : \"hidden\"}} id=\"display\" \r\n                ref = {hiddenFileDisp} \r\n                onChange={onChangeDisp}\r\n                ></input>\r\n                <center>\r\n                <Upload\r\n                onClick={clickDisp}\r\n                className=\"btn-upload\"\r\n                >\r\n                Upload\r\n                </Upload>\r\n                </center>\r\n                </div>\r\n                :\r\n                <div>\r\n                <input type=\"file\" style={{visibility : \"hidden\"}} id=\"cover\" \r\n                ref = {hiddenFileCov} \r\n                onChange={onChangeCov}\r\n                ></input>\r\n                <center>\r\n                <Upload\r\n                onClick={clickCov}\r\n                className=\"btn-upload\"\r\n                >\r\n                Upload\r\n                </Upload>\r\n                </center>\r\n                </div>\r\n                :\r\n                <div>\r\n                <DeletePrompt id=\"deletePrompt\">\r\n                    <img src=\"/closeIcon.png\" height=\"18px\" style={{marginLeft : \"12px\", marginTop : \"12px\", cursor : \"pointer\"}}\r\n                    onClick={(e)=>{document.getElementById(\"deletePrompt\").style.display = \"none\"}} \r\n                    />\r\n                    <P><b>Are you sure you want to delete your account ?</b></P>\r\n                    <Yes\r\n                    onClick={()=>{deleteAccount()}}\r\n                    >Yes</Yes> <No\r\n                    onClick={()=>{document.getElementById(\"deletePrompt\").style.display = \"none\"}}\r\n                    >No</No>\r\n\r\n                </DeletePrompt>\r\n                <center><About contentEditable={true} placeholder=\"Your bio\" \r\n                maxLength={160}\r\n                suppressContentEditableWarning={true}\r\n                onChange={onChange}\r\n                id=\"about\"\r\n                >\r\n                {props.profile.about}\r\n                </About>\r\n                </center>\r\n                <span\r\n                style={{fontSize : \"18px\", float : \"right\", marginRight : \"2em\", color : \"rgba(255, 255, 255, 0.85)\"}}\r\n                >\r\n                { bio?\r\n                `${bio.length}/160`\r\n                : null}\r\n                </span>\r\n                <center>\r\n                <br/><br/>\r\n                <Upload onClick={submit} \r\n                className=\"btn-upload\"\r\n                >Save</Upload>\r\n                </center>\r\n                <center>\r\n                {\r\n                   displayDeleteBtn(props.profile.joined) ?\r\n                <DeleteAccount\r\n                onClick={()=>{document.getElementById(\"deletePrompt\").style.display = \"block\"}}\r\n                >\r\n                    Delete Account\r\n                </DeleteAccount>\r\n                :\r\n                null\r\n                }\r\n                </center>\r\n                </div>\r\n                }\r\n                {\r\n                props.error ?\r\n                    <center>\r\n                    <br/><p\r\n                    style={{fontSize : \"18px\", color : \"red\"}}\r\n                    >\r\n                    {props.error.msg} \r\n                    </p>\r\n                    </center>\r\n                    :\r\n                    null\r\n                } \r\n         </div>\r\n        </Body>\r\n            \r\n    )\r\n}\r\nProfileUpload.propTypes = {\r\n    profile : PropTypes.object.isRequired,\r\n    auth : PropTypes.object.isRequired,\r\n    error : PropTypes.object,\r\n    uploadDisp : PropTypes.func.isRequired,\r\n    uploadCover : PropTypes.func.isRequired,\r\n    uploadBio : PropTypes.func.isRequired,\r\n    clearErrors : PropTypes.func.isRequired,\r\n    logOut : PropTypes.func.isRequired\r\n}\r\nconst mapStateToProps = state =>({\r\n    profile : state.profile,\r\n    auth : state.auth,\r\n    error : state.error\r\n})\r\nexport default connect(mapStateToProps, {uploadDisp, uploadCover, uploadBio, clearErrors, logOut})(ProfileUpload); ","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Reducers\\profileReducer.js",[],"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Actions\\profileActions.js",[],"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\MainPage.js",["127"],"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\MainComponents\\Home.js",[],"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Actions\\tweetActions.js",[],"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\MainComponents\\Search.js",["128"],"import styled from 'styled-components';\r\nimport {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst SearchContainer = styled.div`\r\n    width : 100%;\r\n    font-family : Roboto, Helvetica, Arial, sans-serif;\r\n    font-size : 16px;\r\n`\r\nconst SearchBar = styled.textarea`\r\n    outline : none;\r\n    resize : none;\r\n    width : 66%;\r\n    margin : 15px 15% 0px 15%;\r\n    padding : 8px 1% 2px 1%;\r\n    border-radius : 15px;\r\n    height : 25px;\r\n    font-family : inherit;\r\n    font-size : inherit;\r\n    background : #5c5a5a;\r\n    border : 1px solid #5c5a5a; \r\n    color : rgba(255, 255, 255, 0.9);\r\n    : focus {\r\n        border : 2px solid #1FB9EC;\r\n    }\r\n    :: placeholder {\r\n        color : rgba(255, 255, 255, 0.5);\r\n      \r\n    }\r\n`\r\nconst DropDown = styled.div`\r\n    margin : 0 16% 15px 16%;\r\n    min-height : 65px;\r\n    max-height : 260px;\r\n    overflow-y : auto;\r\n    overflow-x : hidden;\r\n    width : 67%;\r\n    background : #181c1a;\r\n    display : flex;\r\n    flex-direction : column;\r\n    box-shadow : 1px 1px 6px rgba(255, 255, 255, 0.5);\r\n    position : absolute;\r\n    z-index : 3; \r\n`\r\nconst FinalResults = styled.div`\r\n    width : 100%;\r\n    position : absolute;\r\n    top : 15vh;\r\n    max-height : 75vh;\r\n    overflow-y : auto;\r\n    overflow-x : hidden;\r\n    display : flex;\r\n    flex-direction : column;\r\n    z-index : 1;\r\n`\r\nconst Img = styled.img``;\r\nconst Span = styled.span``;\r\nconst P = styled.p``;\r\nconst Bio = styled.p``;\r\nconst Profile = styled.a`\r\n    height : auto;\r\n    width : 100%;\r\n    border-bottom : 1px solid rgba(255, 255, 255, 0.3);\r\n    z-index : inherit;\r\n    border-top : 1px solid rgba(255, 255, 255, 0.3);\r\n    text-decoration : none;\r\n    color : inherit;\r\n    padding-bottom : 8px;\r\n    ${Img}{\r\n        position : relative;\r\n        left : 5px;\r\n        top : 10px;\r\n        z-index : inherit;\r\n    }\r\n    ${Span}{\r\n        position : relative;\r\n        left : 18px;\r\n        bottom : 20px;\r\n        font-weight : bold;\r\n        z-index : inherit;\r\n    }\r\n    ${P}{\r\n        font-size : 15px;\r\n        color : rgba(255, 255, 255, 0.65);\r\n        position : relative;\r\n        bottom : 15px;\r\n        z-index : inherit;\r\n        left : 65px;\r\n    }\r\n    ${Bio}{\r\n        position : relative;\r\n        font-size : 16px;\r\n        left : 74px;\r\n        width : 85%;\r\n        z-index : inherit;\r\n        font-size : 17px;\r\n        color : rgba(255, 255, 255, 0.8);\r\n    }\r\n`\r\n\r\nconst Search = () =>{\r\n    const [getDropDown, setDropDown] = useState(false);\r\n    const [searchResults, setResults] = useState([]);\r\n    const [displayResults, setDisplayResults] = useState([]);\r\n    const [showResults, setShowResults] = useState(false);\r\n    const onChange = (e) =>{\r\n        if(!getDropDown) setDropDown(true)\r\n        const name = e.target.value.toLowerCase().trim();\r\n        if(!name) {\r\n            setResults([]);\r\n            e.target.value=null;\r\n            return;\r\n        }\r\n        getResults(name);\r\n    }\r\n    const getResults = (name) =>{\r\n        axios.post('/api/search', {name : name})\r\n        .then(res => {\r\n            setResults(res.data)\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n    const onSubmit = (e) =>{\r\n        if(e.code===\"Enter\") {\r\n            setDisplayResults(searchResults);\r\n            setShowResults(true);\r\n            document.getElementById(\"searchBar\").blur=true;\r\n            document.getElementById(\"searchBar\").focus = false;\r\n            document.getElementById(\"searchBar\").value=null;\r\n            setDropDown(false)\r\n            return;\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <SearchContainer\r\n        onKeyDown={key => {\r\n            console.log(key.code)\r\n            if(key.code === \"Escape\") {\r\n                setDropDown(false);\r\n            }\r\n        }}\r\n        >\r\n            <SearchBar\r\n            onClick={()=> setDropDown(true)}\r\n            id=\"searchBar\"\r\n            placeholder=\"Search Twitter\"\r\n            onChange={onChange}\r\n            onKeyDown={onSubmit}\r\n            maxLength=\"20\"\r\n            >\r\n            </SearchBar>\r\n            {\r\n                getDropDown ? \r\n                <DropDown>\r\n                    {\r\n                        searchResults?\r\n                        searchResults.map((profile, cnt) =>{\r\n                            if(cnt>7) return null;\r\n                            return(\r\n                            <Profile href={`/profile/${profile.username}`}>\r\n                                {\r\n                                profile.display_pic?\r\n                                <Img src={`/display/${profile.display_pic}`} alt=\"\"  \r\n                                width=\"45px\" height=\"45px\" style={{borderRadius : \"45px\"}}\r\n                                />\r\n                                :\r\n                                <Img src=\"avatar.jpg\" alt=\"\"\r\n                                width=\"45px\" height=\"45px\" style={{borderRadius : \"45px\"}}\r\n                                />\r\n                                }\r\n                                <Span>\r\n                                    {profile.name}\r\n                                </Span>\r\n                                {\r\n                                    profile.isVerified ?\r\n                                    <img src=\"verifiedIcon.png\" width=\"20px\" height=\"20px\"\r\n                                style={{\r\n                                    position : \"relative\",\r\n                                    left : \"22px\",\r\n                                    bottom : \"15px\"\r\n                                }} alt=\"\"/> \r\n                                :\r\n                                null\r\n                                }\r\n                                <P>\r\n                                    {`@${profile.username}`}\r\n                                </P>\r\n                                \r\n                            </Profile>\r\n                            );\r\n                        })\r\n                        : null\r\n                    }\r\n                </DropDown>\r\n                :\r\n                null\r\n            }\r\n        <FinalResults>\r\n        {\r\n            showResults&&displayResults? \r\n            displayResults.map(profile =>{\r\n                return(\r\n                    <Profile href={`/profile/${profile.username}`}> \r\n                        { profile.display_pic ?\r\n                        <Img src={`/display/${profile.display_pic}`} height=\"55px\" width=\"55px\" \r\n                                style={{borderRadius : \"55px\", top : \"15px\"}}\r\n                                />\r\n                        :\r\n                        <Img src=\"avatar.jpg\"\r\n                        height=\"55px\" width=\"55px\" style={{borderRadius : \"55px\", top : \"15px\"}}\r\n                        />\r\n                        }\r\n                                <Span>{profile.name}</Span>\r\n                                {\r\n                                    profile.isVerified ?\r\n                                    <img src=\"verifiedIcon.png\" width=\"20px\" height=\"20px\"\r\n                                style={{\r\n                                    position : \"relative\",\r\n                                    left : \"22px\",\r\n                                    bottom : \"15px\"\r\n                                }} alt=\"\"/> \r\n                                :\r\n                                null\r\n                                }\r\n                                <P\r\n                                style={{left : \"70px\"}}\r\n                                >\r\n                                    {`@${profile.username}`}\r\n                                </P>\r\n                                <Bio>{profile.about}</Bio>\r\n                    </Profile>\r\n                )\r\n            })\r\n            :\r\n            null\r\n        }\r\n        </FinalResults>\r\n        </SearchContainer>\r\n    )\r\n}\r\n\r\nexport default Search;","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\MainComponents\\ProfileHandler.js",["129"],"import styled from 'styled-components';\r\nimport {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport TweetsList from '../TweetComponents/TweetsList';\r\nimport { generateNotifications } from '../../Actions/tweetActions';\r\n\r\nexport const getConfig = (auth) =>{\r\n    const token = auth.token;\r\n    const config = {\r\n        headers : {\r\n            \"Content-type\" : \"application/json\"\r\n        }\r\n    }\r\n    if(token) config.headers[\"x-auth-token\"] = token;\r\n    return config;\r\n}\r\n\r\nconst Container = styled.div`\r\n    width : 100%;\r\n    height : auto;\r\n    position : absolute;\r\n`\r\n\r\nconst TopDiv = styled.div`\r\n    position : fixed;\r\n    height : 35px;\r\n    width : 38%;\r\n    padding : 1% 0 0.5% 1%;\r\n    border-bottom : 1px solid rgba(255, 255, 255, 0.3);\r\n    background : black;\r\n    z-index : 2;   \r\n    display : flex; \r\n`\r\nconst PrevIcon = styled.button`\r\n    outline : none;\r\n    border : none;\r\n    cursor : pointer;\r\n    background : inherit;\r\n    height : auto;\r\n    width : auto;\r\n    margin-right : 15px;\r\n`\r\nconst InnerContainer = styled.div`\r\n    width : 100%;\r\n    position : absolute;\r\n    top : 60px;\r\n    height : auto;\r\n`\r\nconst Emp = styled.p`\r\n    font-weight : bold;\r\n    font-family :  -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\r\n    background : inherit;\r\n    color : rgba(255, 255, 255, 0.8);\r\n    font-size : 18px;\r\n`;\r\nconst Std = styled.p`\r\n    font-family : apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\r\n    font-size : 15px;\r\n    color : rgba(255, 255, 255, 0.9);\r\n    margin-bottom : 10px;\r\n\r\n`\r\nconst Sub = styled.p`\r\n    font-size : 15px;\r\n    font-family :  -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\r\n    color : rgba(255, 255, 255, 0.5);\r\n    margin-bottom : 10px;\r\n\r\n`\r\nconst NameAndTweetCount = styled.div`\r\n    width : 30%;\r\n    margin-left : 5px;\r\n    ${Emp}{\r\n        position : absolute;\r\n        top : 5px;\r\n    }\r\n    ${Sub}{\r\n        position : relative;\r\n        top : 12px;\r\n    }\r\n`\r\nconst Disp = styled.img`\r\n`\r\nconst Cover = styled.img`\r\n`\r\nconst ProfilePics = styled.div`\r\n    max-height : 240px; \r\n    ${Cover}{\r\n        max-height : 200px;\r\n    }\r\n    ${Disp}{\r\n        border-radius : 125px;\r\n        position : relative;\r\n        left : 25px;\r\n        top : -85px;\r\n        border : 5px solid black;\r\n    }\r\n`\r\nconst FollowButton = styled.button`\r\n    outline : none;\r\n    border: 1px solid #1FB9EC;\r\n    background : inherit;\r\n    color : #1FB9EC;\r\n    height : 40px;\r\n    width : 80px;\r\n    border-radius : 35px;\r\n    font-size : 15px;\r\n    cursor : pointer;\r\n    font-weight : bold;\r\n    margin-right : 8px;\r\n    : active {\r\n        background : rgba(193, 237, 232, 0.1);\r\n    }\r\n    @media (max-width : 550px){\r\n        height : 30px;\r\n    }\r\n`\r\nconst ProfileText = styled.div`\r\n    position : relative;\r\n    margin-top : 10px;\r\n    width : 97%; \r\n    border-bottom : 1px solid rgba(255, 255, 255, 0.3); \r\n    padding : 0 0 6px 15px;\r\n\r\n    ${FollowButton}{\r\n        position : absolute;\r\n        right : 0;\r\n        top : -45px;\r\n    }\r\n`\r\n\r\nconst ProfileHandler = (props) =>{\r\n    const [user, setUser] = useState(null);\r\n    const [profile, setProfile] = useState(null);\r\n    const [tweetCount, setTweetCount] = useState(null);\r\n    const [follow, setFollow] = useState(null);\r\n    const username = props.match.params.username;\r\n    const countFormat = x =>{\r\n        if(x<10000) return x;\r\n        if(x>=1000 && x < 1000000) return parseInt(x/1000) + \"K\";\r\n        return parseInt(x/1000000) + \"M\";\r\n    }\r\n    const getProfile = () =>{\r\n        axios.post('/api/auth/profile',  {username : username})\r\n        .then(res =>{\r\n            var result=null;\r\n            if(res.data.length === undefined) result = [res.data]; \r\n            else result = res.data;\r\n            const {name, email, username, display_pic, cover_pic, about, isVerified, joined, followers_cnt, following_cnt} = result[0];\r\n            if(!res.data) return\r\n            setUser({\r\n                name : name,\r\n                email : email, \r\n                username : username});\r\n            setProfile({\r\n                display : display_pic, \r\n                cover : cover_pic, \r\n                about : about, \r\n                isVerified : isVerified,\r\n                joined : joined,\r\n                followers : followers_cnt, \r\n                following : following_cnt\r\n            });\r\n            result.map((item, idx)=>{\r\n                if(item.followed_by === props.auth.user.username) {\r\n                    setFollow(1);\r\n                }\r\n                else if(!follow) setFollow(0)\r\n                return null;\r\n            })\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n    const updateFollow = (state) =>{\r\n        setFollow(state);\r\n        axios.post('/api/auth/follow', {username : username, follow : state}, getConfig(props.auth))\r\n        .then(res =>{\r\n            console.log(state);\r\n            if(state)\r\n            props.generateNotifications(null, props.auth.user.username, username, 0, null);\r\n            else\r\n            props.generateNotifications(null, props.auth.user.username, username, -1, null);\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n    const getTweetCount = () =>{\r\n        axios.post('/api/tweet/count', {username : username})\r\n        .then(res => {\r\n            setTweetCount(res.data.count)\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n    const getJoinedDate = () =>{\r\n        const date = profile.joined;\r\n        const month = date[5] + date[6];\r\n        const list = [\"January\", \"February\", \"March\" ,\"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n        return list[month-1] + ' ' + date[0]+date[1]+date[2]+date[3];\r\n    }\r\n    useEffect(()=>{\r\n        getProfile();\r\n        getTweetCount()\r\n    }, [props.auth])\r\n    return(\r\n        user && profile && follow!=null?\r\n        <Container>\r\n            <TopDiv\r\n            id=\"return-top\"\r\n            >\r\n                <PrevIcon\r\n                onClick={()=>{window.history.back()}}\r\n                >\r\n                <img src=\"/prevIcon.png\" alt=\"\" width=\"30px\"/>\r\n                </PrevIcon>\r\n                <NameAndTweetCount>\r\n                <Emp>\r\n                {user.name}\r\n                {\r\n                    profile.isVerified ?\r\n                <img src=\"/verifiedIcon.png\" width=\"20px\" alt=\"\" style={{\r\n                    position : \"relative\", \r\n                    left : \"4px\", \r\n                    top : \"3px\"\r\n                }}/>\r\n                : null\r\n                }\r\n                </Emp>\r\n                <Sub>\r\n                {`${tweetCount} Tweet`}{tweetCount !== 1 ? 's' : null}\r\n                </Sub>\r\n                </NameAndTweetCount>\r\n            </TopDiv>\r\n          <InnerContainer>\r\n           \r\n            <ProfilePics>\r\n                    {\r\n                        profile.cover?\r\n                    <Cover src={`/cover/${profile.cover}`} alt=\"\" width=\"100%\"/>\r\n                    :\r\n                    <Cover src=\"/grey.png\" width=\"100%\"/>\r\n                    }\r\n                    \r\n                    {\r\n                        profile.display?\r\n                    <Disp src={`/display/${profile.display}`} alt=\"\" width=\"125px\" height=\"125px\"/>\r\n                    :\r\n                    <Disp src=\"/avatar.jpg\" width=\"125px\" height=\"125px\" alt=\"\"/>\r\n                    }\r\n                    \r\n            </ProfilePics>\r\n            <ProfileText>\r\n            {\r\n            user.username !== props.auth.user.username ?\r\n            follow?\r\n            <FollowButton\r\n            onClick={e=>updateFollow(!follow)}\r\n            style={{background : \"#1FB9EC\", color : \"rgba(255, 255, 255, 0.85)\", fontWeight : \"bold\"}}\r\n            >Following</FollowButton>\r\n            :\r\n            <FollowButton\r\n            onClick={e=>updateFollow(!follow)}\r\n            >Follow</FollowButton>\r\n            : \r\n            <FollowButton\r\n            onClick={e =>{window.location=\"/set_up_profile\"}}\r\n            style={{width : \"125px\"}}\r\n            >\r\n                Update Profile\r\n            </FollowButton>\r\n            }\r\n                <Emp>\r\n                {user.name}\r\n                {\r\n                profile.isVerified ?\r\n                <img src=\"/verifiedIcon.png\" width=\"20px\" alt=\"\" style={{\r\n                position : \"relative\", \r\n                left : \"4px\", \r\n                top : \"3px\"\r\n                }}/>\r\n                : null\r\n                }\r\n                </Emp>\r\n                <Sub>\r\n                    @{user.username}\r\n                </Sub>\r\n                <Std>\r\n                    {profile.about}\r\n                </Std>\r\n                <Sub>\r\n                    <img src=\"/calendarIcon.png\" alt=\"\" width=\"18px\"\r\n                    style = {{\r\n                        position : \"relative\",\r\n                        bottom : \"-2px\",\r\n                        marginRight : \"4px\"\r\n                    }}\r\n                    />\r\n                    Joined {getJoinedDate()}\r\n                 </Sub>\r\n                 <Emp\r\n                 style={{display : \"inline\"}}\r\n                 >{countFormat(profile.following)}\r\n                 </Emp>\r\n                 <Sub\r\n                 style={{display : \"inline\", marginLeft : \"6px\"}}\r\n                 > \r\n                Following\r\n                 </Sub>\r\n                 <Emp\r\n                 style={{display : \"inline\", marginLeft : \"6px\"}}\r\n                 >{countFormat(profile.followers)}\r\n                 </Emp>\r\n                 <Sub\r\n                 style={{display : \"inline\", marginLeft : \"6px\"}}\r\n                 > \r\n                Followers\r\n                 </Sub> \r\n            </ProfileText>\r\n            <TweetsList\r\n            type=\"profile\"\r\n            username={props.match.params.username}\r\n            />\r\n            </InnerContainer>\r\n        </Container>\r\n        :\r\n        null\r\n    )\r\n}\r\n\r\nProfileHandler.propTypes = {\r\n    auth : PropTypes.object.isRequired,\r\n    profile : PropTypes.object.isRequired,\r\n    generateNotifications : PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    auth : state.auth,\r\n    profile : state.profile\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {generateNotifications})(ProfileHandler);","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\TweetComponents\\TweetsList.js",["130","131","132"],"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\TweetComponents\\TweetHandler.js",["133"],"import axios from 'axios';\r\nimport styled from 'styled-components';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { getConfig } from '../MainComponents/ProfileHandler';\r\nimport { useState, useEffect} from 'react';\r\nimport TweetsList from './TweetsList';\r\nimport {updateLike} from './TweetsList';\r\nimport Reply from './Reply';\r\n\r\nconst Container = styled.div`\r\n    width : 100%;\r\n    height : auto;\r\n    display : flex;\r\n    flex-direction : column;\r\n`;\r\nexport const InnerContainer = styled.div`\r\n    width : 100%;\r\n    display : flex;\r\n    position : absolute;\r\n    top : 60px;\r\n    flex-direction : column;\r\n`\r\nexport const Button=styled.button`\r\n    outline : none;\r\n    border : none;\r\n    background : inherit;\r\n    cursor : pointer;\r\n`;\r\nexport const ReturnTop = styled.div`\r\n    position : fixed;\r\n    height : 35px;\r\n    width : 37.5%;\r\n    padding : 1% 0 0.5% 1%;\r\n    border-bottom : 1px solid rgba(255, 255, 255, 0.3);\r\n    background : black;\r\n    z-index : 3;\r\n    ${Button}{\r\n        font-size : 20px;\r\n        font-weight : bold;\r\n        font-family :  -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\r\n        color : rgba(255, 255, 255, 0.9);\r\n    }\r\n`\r\nconst Emp = styled.p`\r\n    font-weight : bold;\r\n    font-family :  -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\r\n    background : inherit;\r\n    color : rgba(255, 255, 255, 0.8);\r\n    font-size : 16px;\r\n`\r\nconst Sub = styled.p`\r\n    font-size : 15px;\r\n    font-family :  -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\r\n    color : rgba(255, 255, 255, 0.5);\r\n    margin-bottom : 10px;\r\n\r\n`\r\nconst Std = styled.p`\r\n    font-family : apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\r\n    font-size : 15px;\r\n    color : rgba(255, 255, 255, 0.8);\r\n    margin-bottom : 10px;\r\n\r\n`\r\nconst Display = styled.img`\r\n    margin : 0;\r\n    border-radius : 45px;\r\n`\r\nconst MediaImage = styled.div`\r\n    height : auto;\r\n    width : auto;\r\n    margin-left : 30px;\r\n    margin-right : 80px;\r\n    :hover{\r\n        transform : scale(1.1, 1.1);\r\n        cursor : pointer;\r\n    }\r\n`\r\nconst Like = styled.svg`\r\n    :hover {\r\n        stroke : red;\r\n    }\r\n`\r\nconst ReplyIcon = styled.svg`\r\n    :hover{\r\n        stroke : #1FB9EC;\r\n    }\r\n`\r\nconst IconDiv = styled.div`\r\n    display : flex;\r\n    width : 100%;\r\n    justify-content : space-evenly;\r\n    margin-top : 8px;\r\n`\r\nconst Profile = styled.div`\r\n    position : relative;\r\n    width : 95%;\r\n    padding : 8px;\r\n    display : flex;\r\n`\r\nconst A = styled.a`\r\n    font-family : inherit;\r\n    font-size : inherit;\r\n    text-decoration : none;\r\n        : link{\r\n            color : #1FB9EC;\r\n        }\r\n        : visited{\r\n            color : #1FB9EC;\r\n        }\r\n        : hover{\r\n            color : #1FB9EC;\r\n        }\r\n        : active{\r\n            color : #1FB9EC;\r\n        }\r\n`\r\nconst Tweet = styled.div`\r\n    width : 99%;\r\n    border-bottom : 1px solid rgba(255, 255, 255, 0.3);\r\n    border-top : 1px solid rgba(255, 255, 255, 0.3);\r\n    display : flex;\r\n    flex-direction : column;\r\n    ${Display}{\r\n        position : relative;\r\n        margin-top : 10px;\r\n    }\r\n`\r\nconst TweetHandler = props =>{\r\n    const [tweet, setTweet] = useState(null);\r\n    const [like, setLike] = useState(null);\r\n    const [likesCountMain, setLikesCountMain] = useState(null);\r\n    const getTweetById = id =>{\r\n        axios.post('/api/tweet/id', {id : id}, getConfig(props.auth))\r\n        .then(res => {\r\n            var result = res.data;\r\n            if(res.data.length === undefined) result = [res.data];\r\n            setTweet(result[0]);\r\n            setLikesCountMain(result[0].likes_cnt);\r\n            result.map((item, idx)=>{\r\n                if(item.liked_by === props.auth.user.username){\r\n                    setLike(true);\r\n                }\r\n                else if(!item.liked_by) setLike(false);\r\n                return null;\r\n            })\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n    const likeToggle = (id, likeStatus) =>{\r\n        updateLike(!likeStatus, id, props);\r\n        setLike(!likeStatus);\r\n        if(!likeStatus) setLikesCountMain(likesCountMain+1);\r\n        else setLikesCountMain(likesCountMain-1);\r\n    }\r\n    const getTimeFormat = (tweetDate) =>{\r\n        const year = tweetDate[0] + tweetDate[1] + tweetDate[2] + tweetDate[3];\r\n        var month = tweetDate[5] + tweetDate[6];\r\n        month--;\r\n        var day = tweetDate[8] + tweetDate[9];\r\n        var hr = tweetDate[11] + tweetDate[12], mins = tweetDate[14] + tweetDate[15];\r\n        var t = 'AM';\r\n        if(hr>=13) {\r\n            t = 'PM';\r\n            hr-=12;\r\n        }\r\n        if(hr === 0) hr=12\r\n        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\r\n        return hr+':'+mins+ ' ' + t +' · ' + months[month] + ' ' + day + ', ' + year;\r\n     }\r\n    useEffect(()=>{\r\n        if(props.match.params.id && props.auth.user.username)\r\n        getTweetById(props.match.params.id)\r\n    }, [props.match.params.id, props.auth.user.username])\r\n    return(\r\n        tweet?\r\n        <Container>\r\n            {console.log(like)}\r\n            <ReturnTop\r\n            id=\"return-top\"\r\n            >\r\n                <Button\r\n                onClick={e=>{document.getElementById(\"scrollDiv\").scrollTo(0, 0)}}\r\n                >\r\n                Tweet\r\n                </Button>\r\n            </ReturnTop>\r\n            <InnerContainer>\r\n            <Reply\r\n            id={`reply${props.match.params.id}`}\r\n            style={{display : \"none\"}}\r\n            item={tweet}\r\n            />\r\n            <Tweet>\r\n                <Profile>\r\n                {\r\n                tweet.display_pic ?\r\n                <Display src={`/display/${tweet.display_pic}`} alt=\"\" width=\"55px\" height=\"55px\"/>\r\n                : \r\n                <Display src=\"/avatar.jpg\" width=\"55px\" height=\"55px\" alt=\"\"/>\r\n                }\r\n                <div style={{marginLeft : \"10px\", marginTop : \"10px\"}}>\r\n                    <A href={`/profile/${tweet.username}`}>\r\n                   <Emp>\r\n                        {tweet.name}\r\n                    {\r\n                    tweet.isverified ?\r\n                    <img src=\"/verifiedIcon.png\" width=\"20px\" alt=\"\" style={{\r\n                        position : \"relative\", \r\n                        left : \"4px\", \r\n                        top : \"4px\"\r\n                    }}/>\r\n                    : null\r\n                    }\r\n                    </Emp>\r\n                    <Sub>\r\n                        @{tweet.username}\r\n                    </Sub>\r\n                    </A>\r\n                </div>\r\n                </Profile>\r\n                    <Std\r\n                    style={{fontSize : \"20px\", marginLeft : \"12px\", marginRight : \"12px\"}}\r\n                    >\r\n                        {\r\n                        tweet.content ?\r\n                        tweet.content.split(' ').map((text, ix)=>{\r\n                            if(text[0]==='@') return <A href={`/profile/${text.substring(1, text.length)} `}>{text+\" \"}</A>\r\n                            if(text[0]==='#') return <A href={`/trends/${text.substring(1, text.length)}`}>{text + \" \"}</A>\r\n                            return text + ' ';\r\n                        })\r\n                        : null\r\n                        }\r\n                    </Std>\r\n                    {\r\n                        tweet.image? \r\n                            <MediaImage>\r\n                            <img src={`/tweetImage/${tweet.image}`} alt=\"\" width=\"550px\" height=\"320px\" style={{borderRadius : \"10px\",\r\n                            display : \"inline-block\"}}\r\n                            />\r\n                            </MediaImage>\r\n                        :\r\n                        null\r\n                    }\r\n                    <Sub\r\n                    style={{marginLeft : \"12px\", marginTop : \"10px\" }}\r\n                    >\r\n                   { getTimeFormat(tweet.sent_time) }\r\n                    </Sub>\r\n                    <IconDiv style={{marginBottom : \"5px\"}}>\r\n                    <div>\r\n                    <Button onClick={(e)=>likeToggle(tweet.id, like)}>\r\n                    <Like id=\"like\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill={like ? \"red\" : \"none\"} stroke={like ? \"red\" : \"#838485\"} xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <g clipPath=\"url(#clip0)\">\r\n                    <path d=\"M1.82419 6.7441C1.57937 5.30131 1.96806 4.3331 2.56118 3.71971C3.17619 3.08368 4.08836 2.75 5.00103 2.75C6.7999 2.75 8.16731 4.09781 8.16731 5.65217H8.91731H9.66731C9.66731 4.09781 11.0347 2.75 12.8336 2.75C13.8385 2.75 14.8819 2.98601 15.5324 3.54741C15.8423 3.81489 16.0747 4.1645 16.1829 4.63854C16.2934 5.12225 16.2838 5.77903 16.0292 6.66177C15.7871 7.50154 15.2215 8.47067 14.4563 9.48018C13.6985 10.4798 12.7811 11.4723 11.8867 12.3566C10.9939 13.2392 10.1338 14.0043 9.49654 14.5489C9.27497 14.7382 9.08073 14.9006 8.92186 15.0317C8.7433 14.882 8.5199 14.6926 8.26329 14.4702C7.581 13.879 6.66746 13.0585 5.73866 12.1384C4.80745 11.2159 3.8739 10.2062 3.14387 9.23616C2.39634 8.2429 1.93231 7.38128 1.82419 6.7441Z\" strokeWidth=\"1.5\"/>\r\n                    </g>\r\n                    <defs>\r\n                    <clipPath id=\"clip0\">\r\n                    <rect width=\"20px\" height=\"20px\" fill=\"white\"/> \r\n                    </clipPath>\r\n                    </defs>\r\n                    </Like>\r\n                    </Button>\r\n                    <Sub\r\n                    style={{display : \"inline\", position : \"relative\", bottom : \"5px\", left : \"5px\"}}\r\n                    >{likesCountMain}\r\n                    </Sub>\r\n                    </div>\r\n                    <div>\r\n                    <Button onClick={\r\n                        () => {\r\n                        document.getElementById(`reply${tweet.id}`).style.display=\"block\";\r\n                        document.getElementById(\"body\").style.background= \"#222\";\r\n                        document.getElementById(\"return-top\").style.background=\"#222\";\r\n                        }\r\n                    }>\r\n                    <ReplyIcon width=\"18px\" height=\"18px\" viewBox=\"0 0 20 20\" fill=\"none\" stroke=\"#838485\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M14.1904 12C15.3112 10.8321 16 9.24649 16 7.5C16 3.91015 13.0899 1 9.5 1C5.91015 1 3 3.91015 3 7.5C3 10.9216 5.64378 13.7257 9 13.9811V14.9836C5.09098 14.7263 2 11.4741 2 7.5C2 3.35786 5.35786 0 9.5 0C13.6421 0 17 3.35786 17 7.5C17 9.18841 16.4421 10.7465 15.5005 12H14.1904Z\" strokeWidth=\"1\" />\r\n                    <path d=\"M9 14V19\" strokeWidth=\"1\"/>\r\n                    <path d=\"M9.00029 18.9856C9.0005 19.369 15.0029 12.1039 15 12.0001\" strokeWidth=\"1.5\"/>\r\n                    </ReplyIcon>\r\n                    </Button>\r\n                    <Sub\r\n                    style={{display : \"inline\", position : \"relative\", bottom : \"5px\", left : \"5px\"}}\r\n                    >{tweet.replies_cnt}\r\n                    </Sub>\r\n                    </div>\r\n                    </IconDiv>\r\n            </Tweet>\r\n            <TweetsList\r\n            type=\"replies\" id={props.match.params.id}\r\n            />\r\n            </InnerContainer>\r\n        </Container>\r\n        :\r\n        null\r\n    )\r\n}\r\n\r\nTweetHandler.propTypes = {\r\n    auth : PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth : state.auth\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(TweetHandler);","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\TweetComponents\\MakeTweet.js",["134"],"import styled from 'styled-components'\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {useRef, useState, useEffect} from 'react';\r\nimport {uploadTweet, uploadReply} from '../../Actions/tweetActions';\r\n\r\nconst Container = styled.div`\r\nwidth : 100%;\r\ndisplay : flex;\r\nflex-direction : column;\r\nheight : auto;\r\n\r\n`\r\nconst Img = styled.img``;\r\nconst ImgDiv = styled.div`\r\n    top : 10px;\r\n    left : 10px;\r\n    width : 60px;\r\n    margin : 0;\r\n`\r\nconst TxtDiv = styled.div`\r\nwidth : 100%;\r\nheight : auto;\r\nposition : relative;\r\ntop : 10px;\r\n`;\r\nconst A = styled.a``;\r\nconst TextArea = styled.textarea`\r\n${A}{\r\nfont-family : inherit;\r\nfont-size : inherit;\r\ntext-decoration : none;\r\n: link{\r\n    color : #1FB9EC;\r\n}\r\n: visited{\r\n    color : #1FB9EC;\r\n}\r\n: hover{\r\n    color : #1FB9EC;\r\n}\r\n: active{\r\n    color : #1FB9EC;\r\n}\r\n`;\r\nconst DispAndContent = styled.div`\r\npadding : 10px;\r\ndisplay : flex;\r\nwidth : 98%;\r\nmargin-bottom : 10px;\r\n\r\n${TextArea}{\r\n    border : none;\r\n    outline : none;\r\n    resize : none;\r\n    background : inherit;\r\n    width : 100%;\r\n    font-family : Helvetica, sans-serif;\r\n    font-size : 18px;\r\n    margin : 0px 5px;\r\n    border : none;\r\n    color : rgba(255, 255, 255, 0.8);\r\n}\r\n\r\n`\r\nconst Image = styled.div`\r\nmargin : 10px;\r\nposition : relative;\r\nleft : 10%;\r\n`\r\nconst CloseIcon = styled.button`\r\noutline : none;\r\nborder : none;\r\nbackground : inherit;\r\ncursor : pointer;\r\nposition : absolute;\r\nleft : 1%;\r\ntop : 15px;\r\n`\r\nconst Buttons = styled.div`\r\ndisplay : flex;\r\n\r\nwidth : 90%;\r\nheight : 45px;\r\nposition : relative;\r\nleft : 10%;\r\n`\r\nconst UploadImageIcon = styled.button`\r\nborder : none;\r\noutline : none;\r\ncursor : pointer;\r\nbackground : inherit;\r\n// Must be same as upload icon\r\nheight : 20px;\r\nwidth : 20px;\r\n`\r\nconst SendTweet = styled.button`\r\nposition : absolute;\r\nright : 5%;\r\ntop : 0px;\r\noutline : none;\r\nborder : none;\r\nheight : 30px;\r\nwidth : 70px;\r\nborder-radius : 15px;\r\nbackground-color : #1FB9EC;\r\ncursor : pointer;\r\nfont-weight : bold;\r\ncolor : #fff;\r\n\r\n@media (max-width : 900px){\r\nheight : 25px;\r\nwidth : 50px;\r\n}\r\n`\r\nconst ErrorDiv = styled.div`\r\nposition : absolute;\r\ntop : 80vh;\r\nleft : 30%;\r\nbackground : #18a4f5;\r\nheight : 30px;\r\nwidth : 0%;\r\nvisibility : hidden;\r\ncolor : rgba(255, 255, 255, 0.85);\r\nfont-family : \"Segoe UI\", Roboto, Helvetica;\r\nfont-size : 16px;\r\nfont-weight : bold;\r\nalign-content : center;\r\nborder-radius : 15px;\r\n`\r\n\r\nconst MakeTweet = props => {\r\n    const [imgFile, setImgFile] = useState(null);\r\n    const [content, setContent] = useState('');\r\n    useEffect(()=>{ \r\n        if(!imgFile && !content) \r\n        {\r\n            document.getElementById(`${props.tweetbtn}${props.id}`).style.background=\"rgba(31, 185, 236, 0.7)\";\r\n            document.getElementById(`${props.tweetbtn}${props.id}`).style.color=\"rgba(255, 255, 255, 0.5)\";\r\n            document.getElementById(`${props.tweetbtn}${props.id}`).disabled = true;\r\n            document.getElementById(`${props.tweetbtn}${props.id}`).style.cursor = \"default\";\r\n        }\r\n        else {\r\n            document.getElementById(`${props.tweetbtn}${props.id}`).style.background=\"rgba(31, 185, 236, 1)\";\r\n            document.getElementById(`${props.tweetbtn}${props.id}`).style.color=\"rgba(255, 255, 255, 0.85)\"\r\n            document.getElementById(`${props.tweetbtn}${props.id}`).disabled = false;\r\n            document.getElementById(`${props.tweetbtn}${props.id}`).style.cursor = \"pointer\";\r\n        }\r\n        if(props.tweetbtn===\"Tweet\"){\r\n            document.getElementById(\"mktwt\").style.borderBottom = \"1px solid rgba(255, 255, 255, 0.3)\"; \r\n        }\r\n    }, [imgFile, content])\r\n   const onChangeTInput = (e) => {\r\n        e.preventDefault()\r\n        if(document.getElementById(`${props.tweetbtn}${props.id}input`).value.length>=160){\r\n            document.getElementById(`${props.tweetbtn}${props.id}counter`).style.color = \"red\";\r\n            \r\n        }\r\n        else if(document.getElementById(`${props.tweetbtn}${props.id}input`).value.length<=159){\r\n            document.getElementById(`${props.tweetbtn}${props.id}counter`).style.color = \"#009ac9\";\r\n        }\r\n        setContent(document.getElementById(`${props.tweetbtn}${props.id}input`).value);\r\n        e.target.style.height = \"50px\";\r\n        e.target.style.height = (e.target.scrollHeight+25)+\"px\";\r\n    }\r\n    const onClickClose = e => {\r\n        setImgFile(null);\r\n    }\r\n    const hiddenImgUpload = useRef(null);\r\n    const clickImg = (e) => hiddenImgUpload.current.click();\r\n    const onChangeImg = e => { \r\n        const file = e.target.files[0];\r\n        e.target.value=null;\r\n        if (!file.name.match(/\\.(jpg|JPG|jpeg|JPEG|png|PNG)$/)) {\r\n            document.getElementById(\"errorDiv\").style.visibility=\"visible\";\r\n            document.getElementById(\"errorDiv\").style.width=\"35%\";\r\n            setTimeout(()=>{\r\n                document.getElementById(\"errorDiv\").style.visibility=\"hidden\";\r\n                document.getElementById(\"errorDiv\").style.width=\"0%\";\r\n            }, 1500);\r\n            return;\r\n        }\r\n        if(!file) return;\r\n        setImgFile(file);\r\n    }\r\n    const submit = (e) =>{\r\n        const formData = new FormData();\r\n        formData.append('image', imgFile);\r\n        if(props.tweetbtn===\"Tweet\")\r\n        props.uploadTweet(content, formData, null);\r\n        else{\r\n        props.uploadReply(content, formData, props.user_to, props.id);\r\n        document.getElementById(`reply${props.id}`).style.display=\"none\";\r\n        document.getElementById(\"body\").style.background= \"#000\";\r\n        document.getElementById(\"return-top\").style.background=\"#000\";\r\n        }\r\n        setImgFile(null);\r\n        document.getElementById(`${props.tweetbtn}${props.id}input`).value=null;\r\n        setContent('');\r\n    }\r\n    return (\r\n        <Container id=\"mktwt\">\r\n                <DispAndContent>\r\n                <ImgDiv>\r\n                {\r\n                    props.profile.display?\r\n                <Img src={`/display/${props.profile.display}`} alt=\"\"\r\n                style={{height : `${props.displaySize}`, borderRadius : `${props.displaySize}`, width : `${props.displaySize}`}}\r\n                />\r\n                :\r\n                <Img src=\"avatar.jpg\" alt=\"\"\r\n                style={{height : `${props.displaySize}`, borderRadius : `${props.displaySize}`, width : `${props.displaySize}`}}\r\n                />\r\n                }\r\n                </ImgDiv>\r\n                    <TxtDiv>\r\n                    <TextArea placeholder={props.tweetbtn === \"Tweet\" ? \"What's happening?\" : \"Your reply\"}\r\n                    maxLength ={160}\r\n                    id={`${props.tweetbtn}${props.id}input`}\r\n                    onChange={onChangeTInput}\r\n                    >\r\n                    </TextArea> \r\n                    </TxtDiv>\r\n                </DispAndContent>\r\n                    {\r\n                       imgFile? \r\n                       <Image>\r\n                        <CloseIcon\r\n                        onClick = {onClickClose}\r\n                        >\r\n                        <img src=\"/closeIcon.png\" width=\"30px\" height=\"30px\" alt=\"\"/>\r\n                        </CloseIcon>\r\n                       <img src = {URL.createObjectURL(imgFile)} width=\"400px\" height=\"300px\" max-height = \"250px\" alt=\"\"\r\n                       style={{borderRadius : \"25px\"}}\r\n                       />\r\n                       </Image>\r\n                       : null\r\n                    }\r\n                <Buttons>\r\n                <input type=\"file\" style={{visibility : \"hidden\", width : \"0px\"}}  \r\n                ref = {hiddenImgUpload} \r\n                onChange={onChangeImg}\r\n                ></input>\r\n                <UploadImageIcon\r\n                onClick={clickImg}\r\n                >\r\n                <img src=\"/photoUploadIcon.png\" height=\"20px\" width=\"20px\" style={{top : \"10px\"}} alt=\"\"/>\r\n                </UploadImageIcon>\r\n                <span\r\n                id={`${props.tweetbtn}${props.id}counter`}\r\n                style={{color : \"#009ac9\",\r\n                        marginLeft : \"20px\"}}>\r\n                {\r\n                   content ?  `${content.trim().length}/160` : null\r\n                }\r\n                </span>\r\n                <SendTweet id={`${props.tweetbtn}${props.id}`}\r\n                onClick={submit}\r\n                >\r\n                    {props.tweetbtn}\r\n                </SendTweet>\r\n            </Buttons>\r\n            <center>\r\n                <ErrorDiv id=\"errorDiv\"\r\n                >\r\n                    Please choose a photo\r\n                </ErrorDiv>\r\n            </center>\r\n         </Container>\r\n    )\r\n}\r\n\r\nMakeTweet.propTypes = {\r\n    auth : PropTypes.object.isRequired,\r\n    profile : PropTypes.object.isRequired,\r\n    uploadTweet : PropTypes.func.isRequired,\r\n    uploadReply : PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    auth : state.auth,\r\n    profile : state.profile\r\n})\r\n\r\nexport default connect(mapStateToProps, {uploadTweet, uploadReply})(MakeTweet); ","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\TweetComponents\\Reply.js",[],"C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\MainComponents\\Notifications.js",["135"],"import axios from 'axios';\r\nimport styled from 'styled-components';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {ReturnTop, Button} from '../TweetComponents/TweetHandler'\r\nimport { useEffect, useState } from 'react';\r\nimport { getConfig } from './ProfileHandler';\r\nimport {Std, Emp, A} from '../TweetComponents/TweetsList'\r\n\r\nconst Container = styled.div`\r\n    width : 100%;\r\n` \r\nconst InnerContainer = styled.div`\r\n    width : 100%;\r\n    display : flex;\r\n    flex-direction : column;\r\n    position : absolute;\r\n    top : 60px;\r\n`\r\nconst Notification = styled.div`\r\n    border-bottom : 1px solid rgba(255, 255, 255, 0.3);\r\n    padding : 5px 10px 10px 15px;\r\n\r\n`\r\nconst Notifications = (props) =>{\r\n    const [notifList, setNotifList] = useState(null);\r\n\r\n    const getNotifications = () => {\r\n        axios.get('/api/notifications/list', getConfig(props.auth))\r\n        .then(res => {\r\n            if(res.data.length)\r\n            setNotifList(res.data)\r\n            else\r\n            setNotifList(null)\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n    useEffect(()=>{\r\n        if(props.auth !== undefined){\r\n        getNotifications();\r\n        }\r\n    }, [] )\r\n    return (\r\n        <Container>\r\n            <ReturnTop>\r\n                <Button>\r\n                    Notifications\r\n                </Button>\r\n            </ReturnTop>\r\n            <InnerContainer>\r\n                {\r\n                    notifList ?\r\n                    notifList.map((item, ix)=>{\r\n                        let bg = null;\r\n                        bg = item.seen === 0 ? \"#222\" : \"inherit\" ;\r\n                        return <Notification style={{background : bg}}>\r\n                            \r\n                            {\r\n                                item.display_pic ?\r\n                            <img src={`/display/${item.display_pic}`} width=\"35px\" height=\"35px\" style={{borderRadius  : \"35px\"}} alt=\"\"/>                           \r\n                            :\r\n                            <img src={`/avatar.jpg`} width=\"35px\" height=\"35px\" style={{borderRadius  : \"35px\"}} alt=\"\"/>\r\n                            }\r\n                            {\r\n                                item.type===0 ?\r\n                                <Std>\r\n                                    <A href={`/profile/${item.user_from}`} style={{color : \"white\"}}>\r\n                                        <b>\r\n                                            {item.name}\r\n                                        </b>\r\n                                    </A>{\" started following you\"} \r\n                                </Std> \r\n                                :\r\n                                item.type === 1?\r\n                                <Std>\r\n                                <A href={`/profile/${item.user_from}`} style={{color : \"white\"}}>\r\n                                        <b>\r\n                                            {item.name}\r\n                                        </b>\r\n                                    </A>{\" mentioned you in a tweet\"}\r\n                                    <br/>\r\n                                    <A href={`/tweet/${item.tweet_id}`} style={{color : \"white\"}}>\r\n                                    {item.content.split(' ').map((text, ix)=>{\r\n                                        if(text[0]==='@') return <A href={`/profile/${text.substring(1, text.length)}`}>{text + \" \"}</A>\r\n                                        return text + ' ';\r\n                                    })}\r\n                                    </A>\r\n                                </Std>\r\n                                \r\n                                :\r\n                                <Std>\r\n                                    <A href={`/profile/${item.user_from}`} style={{color : \"white\"}}>\r\n                                        <b>\r\n                                            {item.name}\r\n                                        </b>\r\n                                    </A>\r\n                                    <A href={`tweet/${item.tweet_id}`} style={{color : \"white\"}}>\r\n                                    {\" replied to your tweet\"}\r\n                                    </A>\r\n                                    <br/>\r\n                                    \r\n                                </Std>\r\n                            }\r\n                            </Notification>\r\n                    })\r\n                    :\r\n                <Emp style={{position : \"relative\", top : \"20px\", margin : \"auto\", fontSize : \"18px\"}}>\r\n                You do not have any notifications\r\n                </Emp>\r\n                }\r\n            </InnerContainer>\r\n        </Container>\r\n    )\r\n}\r\n\r\nNotifications.propTypes = {\r\n    auth : PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth : state.auth\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(Notifications); ","C:\\Users\\inspiron\\Desktop\\twitterClone\\client\\src\\Components\\TweetComponents\\TrendHandler.js",["136"],"import TweetsList from '../TweetComponents/TweetsList'\r\nimport styled from 'styled-components'\r\nimport {Button, ReturnTop, InnerContainer, Emp} from '../TweetComponents/TweetHandler'\r\n\r\nconst Container = styled.div`\r\n    width : 100%;\r\n\r\n`\r\n\r\nconst TrendHandler = (props) =>{\r\n    return(\r\n        <Container>\r\n            <ReturnTop\r\n            id=\"return-top\"\r\n            >\r\n                <Button\r\n                onClick={e=>{document.getElementById(\"scrollDiv\").scrollTo(0, 0)}}\r\n                >\r\n                Trends\r\n                </Button>\r\n            </ReturnTop>\r\n            <InnerContainer>\r\n            <TweetsList\r\n            type=\"trends\"\r\n            hashtag={props.match.params.hashtag}\r\n            />\r\n            </InnerContainer>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default TrendHandler;",{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":122,"column":12,"nodeType":"143","endLine":122,"endColumn":50,"suggestions":"144"},{"ruleId":"141","severity":1,"message":"142","line":195,"column":12,"nodeType":"143","endLine":195,"endColumn":50,"suggestions":"145"},{"ruleId":"141","severity":1,"message":"146","line":232,"column":8,"nodeType":"143","endLine":232,"endColumn":10,"suggestions":"147"},{"ruleId":"141","severity":1,"message":"148","line":243,"column":8,"nodeType":"143","endLine":243,"endColumn":23,"suggestions":"149"},{"ruleId":"150","severity":1,"message":"151","line":430,"column":21,"nodeType":"152","endLine":432,"endColumn":23},{"ruleId":"141","severity":1,"message":"153","line":116,"column":8,"nodeType":"143","endLine":116,"endColumn":34,"suggestions":"154"},{"ruleId":"155","severity":1,"message":"156","line":2,"column":9,"nodeType":"157","messageId":"158","endLine":2,"endColumn":18},{"ruleId":"141","severity":1,"message":"159","line":204,"column":8,"nodeType":"143","endLine":204,"endColumn":20,"suggestions":"160"},{"ruleId":"155","severity":1,"message":"161","line":147,"column":12,"nodeType":"157","messageId":"158","endLine":147,"endColumn":17},{"ruleId":"162","severity":1,"message":"163","line":236,"column":13,"nodeType":"164","messageId":"165","endLine":257,"endColumn":14},{"ruleId":"141","severity":1,"message":"166","line":272,"column":8,"nodeType":"143","endLine":272,"endColumn":50,"suggestions":"167"},{"ruleId":"141","severity":1,"message":"168","line":175,"column":8,"nodeType":"143","endLine":175,"endColumn":57,"suggestions":"169"},{"ruleId":"141","severity":1,"message":"170","line":152,"column":8,"nodeType":"143","endLine":152,"endColumn":26,"suggestions":"171"},{"ruleId":"141","severity":1,"message":"172","line":42,"column":8,"nodeType":"143","endLine":42,"endColumn":10,"suggestions":"173"},{"ruleId":"155","severity":1,"message":"174","line":3,"column":44,"nodeType":"157","messageId":"158","endLine":3,"endColumn":47},"no-native-reassign",["175"],"no-negated-in-lhs",["176"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'prevMsg'. Either include it or remove the dependency array.","ArrayExpression",["177"],["178"],"React Hook useEffect has missing dependencies: 'props.profile.about', 'props.profile.cover', and 'props.profile.display'. Either include them or remove the dependency array. If 'setCoverPic' needs the current value of 'props.profile.cover', you can also switch to useReducer instead of useState and read 'props.profile.cover' in the reducer.",["179"],"React Hook useEffect has missing dependencies: 'prevBio', 'prevCover', and 'prevDisplay'. Either include them or remove the dependency array.",["180"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'prevNotifs' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["181"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'getProfile' and 'getTweetCount'. Either include them or remove the dependency array.",["182"],"'dummy' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has missing dependencies: 'getFollowingTweets', 'getProfileTweets', 'getReplies', 'getTrendTweets', 'props.hashtag', 'props.id', and 'props.type'. Either include them or remove the dependency array.",["183"],"React Hook useEffect has a missing dependency: 'getTweetById'. Either include it or remove the dependency array.",["184"],"React Hook useEffect has missing dependencies: 'props.id' and 'props.tweetbtn'. Either include them or remove the dependency array.",["185"],"React Hook useEffect has missing dependencies: 'getNotifications' and 'props.auth'. Either include them or remove the dependency array.",["186"],"'Emp' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"187","fix":"188"},{"desc":"187","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},"Update the dependencies array to be: [prevMsg, props.err.msg, props.isAuthenticated]",{"range":"206","text":"207"},{"range":"208","text":"207"},"Update the dependencies array to be: [props.profile.about, props.profile.cover, props.profile.display]",{"range":"209","text":"210"},"Update the dependencies array to be: [prevBio, prevCover, prevDisplay, props.profile]",{"range":"211","text":"212"},"Update the dependencies array to be: [prevNotifs, props, props.auth.notifications]",{"range":"213","text":"214"},"Update the dependencies array to be: [getProfile, getTweetCount, props.auth]",{"range":"215","text":"216"},"Update the dependencies array to be: [props.username, props.auth.user.username, props.type, props.id, props.hashtag, getProfileTweets, getReplies, getTrendTweets, getFollowingTweets]",{"range":"217","text":"218"},"Update the dependencies array to be: [props.match.params.id, props.auth.user.username, getTweetById]",{"range":"219","text":"220"},"Update the dependencies array to be: [imgFile, content, props.tweetbtn, props.id]",{"range":"221","text":"222"},"Update the dependencies array to be: [getNotifications, props.auth]",{"range":"223","text":"224"},[3084,3122],"[prevMsg, props.err.msg, props.isAuthenticated]",[4619,4657],[5551,5553],"[props.profile.about, props.profile.cover, props.profile.display]",[5878,5893],"[prevBio, prevCover, prevDisplay, props.profile]",[3245,3271],"[prevNotifs, props, props.auth.notifications]",[6019,6031],"[getProfile, getTweetCount, props.auth]",[8766,8808],"[props.username, props.auth.user.username, props.type, props.id, props.hashtag, getProfileTweets, getReplies, getTrendTweets, getFollowingTweets]",[5126,5175],"[props.match.params.id, props.auth.user.username, getTweetById]",[3631,3649],"[imgFile, content, props.tweetbtn, props.id]",[1211,1213],"[getNotifications, props.auth]"]